'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* eslint-disable no-param-reassign */
var directive = {
  bind (el, binding, vnode) {
    const contextmenu = vnode.context.$refs[binding.arg];
    contextmenu.$refs.reference = el;
    contextmenu.$contextmenuId = binding.arg;
  },
}

var Contextmenu = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{directives:[{name:"show",rawName:"v-show",value:(_vm.visible),expression:"visible"}],ref:"contextmenu",class:_vm.contextmenuCls,style:(_vm.style)},[_vm._t("default")],2)},staticRenderFns: [],
  name: 'VContextmenu',

  provide () {
    return {
      $$contextmenu: this,
    }
  },

  props: {
    eventType: {
      type: String,
      default: 'contextmenu',
    },
    theme: {
      type: String,
      default: 'default',
    },
  },

  data () {
    return {
      visible: false,
      style: {
        top: 0,
        left: 0,
      },
    }
  },
  computed: {
    clickOutsideHandler () {
      return this.visible ? this.hide : () => {}
    },
    isClick () {
      return this.eventType === 'click'
    },
    contextmenuCls () {
      return [
        'v-contextmenu',
        `v-contextmenu--${this.theme}`,
      ]
    },
  },

  watch: {
    visible (value) {
      if (value) {
        document.body.addEventListener('click', this.handleBodyClick);
      } else {
        document.body.removeEventListener('click', this.handleBodyClick);
      }
    },
  },
  mounted () {
    document.body.appendChild(this.$el);

    if (window.$$VContextmenu) {
      window.$$VContextmenu[this.$contextmenuId] = this;
    } else {
      window.$$VContextmenu = { [this.$contextmenuId]: this };
    }

    if (this.$refs.reference) {
      this.$refs.reference.addEventListener(this.eventType, this.handleReferenceContextmenu);
    }
  },
  destroyed () {
    document.body.removeChild(this.$el);

    delete window.$$VContextmenu[this.$contextmenuId];

    if (this.$refs.reference) {
      this.$refs.reference.removeEventListener(this.eventType, this.handleReferenceContextmenu);
    }

    document.body.removeEventListener('click', this.handleBodyClick);
  },

  methods: {
    handleReferenceContextmenu (event) {
      event.preventDefault();

      const eventX = event.pageX;
      const eventY = event.pageY;

      this.show();

      this.$nextTick(() => {
        const contextmenuWidth = this.$refs.contextmenu.clientWidth;
        const contextmenuHeight = this.$refs.contextmenu.clientHeight;
        const contextmenuPosition = {
          top: eventY,
          left: eventX,
        };

        if (contextmenuHeight + eventY >= window.innerHeight) {
          contextmenuPosition.top -= contextmenuHeight;
        }

        if (contextmenuWidth + eventX >= window.innerWidth) {
          contextmenuPosition.left -= contextmenuWidth;
        }

        this.style = {
          top: `${contextmenuPosition.top}px`,
          left: `${contextmenuPosition.left}px`,
        };
      });
    },
    handleBodyClick (event) {
      const notOutside = this.$el.contains(event.target) || (
        this.isClick && this.$refs.reference.contains(event.target)
      );

      if (!notOutside) {
        this.visible = false;
      }
    },
    show (position) {
      Object.keys(window.$$VContextmenu).forEach((key) => {
        if (key !== this.$contextmenuId) {
          window.$$VContextmenu[key].hide();
        }
      });

      if (position) {
        this.style = {
          top: `${position.top}px`,
          left: `${position.left}px`,
        };
      }

      this.visible = true;
      this.$emit('show', this);
    },
    hide () {
      this.visible = false;
      this.$emit('hide', this);
    },
  },
}

var ContextmenuItem = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.divider)?_c('li',{staticClass:"v-contextmenu-divider"}):_c('li',{class:_vm.classname,on:{"click":_vm.handleClick,"mouseenter":_vm.handleMouseenter,"mouseleave":_vm.handleMouseleave}},[_vm._t("default")],2)},staticRenderFns: [],
  name: 'VContextmenuItem',

  inject: ['$$contextmenu'],

  props: {
    divider: Boolean,
    disabled: Boolean,
    autoHide: {
      type: Boolean,
      default: true,
    },
  },

  data () {
    return {
      hover: false,
    }
  },
  computed: {
    classname () {
      return {
        'v-contextmenu-item': !this.divider,
        'v-contextmenu-item--hover': this.hover,
        'v-contextmenu-item--disabled': this.disabled,
      }
    },
  },

  methods: {
    handleMouseenter (event) {
      if (this.disabled) return

      this.hover = true;

      this.$emit('mouseenter', this, event);
    },
    handleMouseleave (event) {
      if (this.disabled) return

      this.hover = false;

      this.$emit('mouseleave', this, event);
    },

    handleClick (event) {
      if (this.disabled) return

      this.$emit('click', this, event);

      this.autoHide && this.$$contextmenu.hide();
    },
  },
}

var ContextmenuSubmenu = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{class:_vm.classname,on:{"mouseenter":_vm.handleMouseenter,"mouseleave":_vm.handleMouseleave}},[_c('span',{staticClass:"v-contextmenu-submenu__title"},[_vm._t("title",[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c('span',{staticClass:"v-contextmenu-iconfont v-contextmenu-submenu__icon"})],2),_vm._v(" "),_c('ul',{directives:[{name:"show",rawName:"v-show",value:(_vm.hover),expression:"hover"}],ref:"submenu",class:_vm.submenuCls},[_vm._t("default")],2)])},staticRenderFns: [],
  name: 'VContextmenuSubmenu',

  props: {
    title: String,
    disabled: Boolean,
  },

  data () {
    return {
      hover: false,
      submenuPlacement: [],
    }
  },
  computed: {
    classname () {
      return {
        'v-contextmenu-item': true,
        'v-contextmenu-submenu': true,
        'v-contextmenu-item--hover': this.hover,
        'v-contextmenu-item--disabled': this.disabled,
      }
    },
    submenuCls () {
      return [
        'v-contextmenu',
        ...this.submenuPlacement,
      ]
    },
  },

  methods: {
    handleMouseenter (event) {
      if (this.disabled) return

      const { target } = event;
      const targetDimension = target.getBoundingClientRect();

      this.hover = true;

      this.$emit('mouseenter', this, event);

      this.$nextTick(() => {
        const submenuWidth = this.$refs.submenu.clientWidth;
        const submenuHeight = this.$refs.submenu.clientHeight;
        const submenuPlacement = [];

        if (targetDimension.right + submenuWidth >= window.innerWidth) {
          submenuPlacement.push('left');
        } else {
          submenuPlacement.push('right');
        }

        if (targetDimension.bottom + submenuHeight >= window.innerHeight) {
          submenuPlacement.push('bottom');
        } else {
          submenuPlacement.push('top');
        }

        this.submenuPlacement = submenuPlacement;
      });
    },
    handleMouseleave (event) {
      if (this.disabled) return

      this.hover = false;

      this.$emit('mouseleave', this, event);
    },
  },
}

var ContextmenuGroup = {render: function(){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{staticClass:"v-contextmenu-group"},[_c('ul',{staticClass:"v-contextmenu-group__menus",style:(_vm.menusStyle)},[_vm._t("default")],2)])},staticRenderFns: [],
  name: 'VContextmenuGroup',

  props: {
    maxWidth: [Number, String],
  },

  computed: {
    menusStyle () {
      if (!this.maxWidth) return null

      const style = {
        'max-width': typeof this.maxWidth === 'number' ? `${this.maxWidth}px` : this.maxWidth,
        'overflow-x': 'auto',
      };

      return style
    },
  },
}

var index = {
  install (Vue) {
    Vue.directive('contextmenu', directive);

    Vue.component(Contextmenu.name, Contextmenu);
    Vue.component(ContextmenuItem.name, ContextmenuItem);
    Vue.component(ContextmenuSubmenu.name, ContextmenuSubmenu);
    Vue.component(ContextmenuGroup.name, ContextmenuGroup);
  },
}

exports.directive = directive;
exports.Contextmenu = Contextmenu;
exports.ContextmenuItem = ContextmenuItem;
exports.ContextmenuSubmenu = ContextmenuSubmenu;
exports.ContextmenuGroup = ContextmenuGroup;
exports['default'] = index;
